/******************************************************************************
 * Filename:       Control.h
 *
 * Description:    This file contains the Control service definitions and
 *                 prototypes.
 *
 *                 Generated by:
 *                 BDS version: 1.1.3139.0
 *                 Plugin:      Texas Instruments BLE SDK GATT Server plugin 1.0.9
 *                 Time:        Tue May 29 2018 02:48:00 GMT+02:00
 *

 * Copyright (c) 2015-2017, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *****************************************************************************/

#ifndef _CONTROL_H_
#define _CONTROL_H_

#ifdef __cplusplus
extern "C"
{
#endif

/*********************************************************************
 * INCLUDES
 */
#include <bcomdef.h>

/*********************************************************************
 * CONSTANTS
 */
// Service UUID
#define CONTROL_SERV_UUID 0xCEBB
#define CONTROL_SERV_UUID_BASE128(uuid) 0xD3, 0x7F, 0x21, 0x2C, 0xBC, 0xEE, 0xEE, 0x98, 0xF3, 0x4B, 0xD0, 0x79, LO_UINT16(uuid), HI_UINT16(uuid), 0x40, 0x37

// Command Characteristic defines
#define C_COMMAND_ID                 0
#define C_COMMAND_UUID               0x57B0
#define C_COMMAND_UUID_BASE128(uuid) 0xD3, 0x7F, 0x21, 0x2C, 0xBC, 0xEE, 0xEE, 0x98, 0xF3, 0x4B, 0xD0, 0x79, LO_UINT16(uuid), HI_UINT16(uuid), 0x40, 0x37
#define C_COMMAND_LEN                16
#define C_COMMAND_LEN_MIN            16

// Mode Characteristic defines
#define C_MODE_ID                 1
#define C_MODE_UUID               0x5650
#define C_MODE_UUID_BASE128(uuid) 0xD3, 0x7F, 0x21, 0x2C, 0xBC, 0xEE, 0xEE, 0x98, 0xF3, 0x4B, 0xD0, 0x79, LO_UINT16(uuid), HI_UINT16(uuid), 0x40, 0x37
#define C_MODE_LEN                16
#define C_MODE_LEN_MIN            16

// Status Characteristic defines
#define C_STATUS_ID                 2
#define C_STATUS_UUID               0x7ED3
#define C_STATUS_UUID_BASE128(uuid) 0xD3, 0x7F, 0x21, 0x2C, 0xBC, 0xEE, 0xEE, 0x98, 0xF3, 0x4B, 0xD0, 0x79, LO_UINT16(uuid), HI_UINT16(uuid), 0x40, 0x37
#define C_STATUS_LEN                16
#define C_STATUS_LEN_MIN            16

/*********************************************************************
 * TYPEDEFS
 */

// Fields in characteristic "Command"
//   Field "Command" format: uint128, bits: 128

// Fields in characteristic "Mode"
//   Field "Mode" format: uint128, bits: 128

// Fields in characteristic "Status"
//   Field "Status" format: uint128, bits: 128

/*********************************************************************
 * MACROS
 */

/*********************************************************************
 * Profile Callbacks
 */

// Callback when a characteristic value has changed
typedef void (*ControlChange_t)( uint16_t connHandle, uint16_t svcUuid, uint8_t paramID, uint8_t *pValue, uint16_t len );

typedef struct
{
  ControlChange_t        pfnChangeCb;     // Called when characteristic value changes
  ControlChange_t        pfnCfgChangeCb;  // Called when characteristic CCCD changes
} ControlCBs_t;



/*********************************************************************
 * API FUNCTIONS
 */


/*
 * Control_AddService- Initializes the Control service by registering
 *          GATT attributes with the GATT server.
 *
 *    rspTaskId - The ICall Task Id that should receive responses for Indications.
 */
extern bStatus_t Control_AddService( uint8_t rspTaskId );

/*
 * Control_RegisterAppCBs - Registers the application callback function.
 *                    Only call this function once.
 *
 *    appCallbacks - pointer to application callbacks.
 */
extern bStatus_t Control_RegisterAppCBs( ControlCBs_t *appCallbacks );

/*
 * Control_SetParameter - Set a Control parameter.
 *
 *    param - Profile parameter ID
 *    len   - length of data to write
 *    value - pointer to data to write.  This is dependent on
 *            the parameter ID and may be cast to the appropriate
 *            data type (example: data type of uint16_t will be cast to
 *            uint16_t pointer).
 */
extern bStatus_t Control_SetParameter( uint8_t param, uint16_t len, void *value );

/*
 * Control_GetParameter - Get a Control parameter.
 *
 *    param - Profile parameter ID
 *    len   - pointer to a variable that contains the maximum length that can be written to *value.
              After the call, this value will contain the actual returned length.
 *    value - pointer to data to write.  This is dependent on
 *            the parameter ID and may be cast to the appropriate
 *            data type (example: data type of uint16_t will be cast to
 *            uint16_t pointer).
 */
extern bStatus_t Control_GetParameter( uint8_t param, uint16_t *len, void *value );

/*********************************************************************
*********************************************************************/

#ifdef __cplusplus
}
#endif

#endif /* _CONTROL_H_ */

